// @flow

export type MicStatusField = 'INACTIVE' | 'ACTIVE' | 'DENIED';

export type RequestStatus = 'INACTIVE' | 'PENDING' | 'ERROR';

export type DataField = {
  field: string,
  weight: number
};

export type Options = {
  triggerCustomQuery?: boolean,
  triggerDefaultQuery?: boolean,
  stateChanges?: boolean
};

export type GenerateQueryResponse = {
  requestBody: Array<Object>,
  orderOfQueries: Array<string>
};

export type Observer = {
  callback: Function,
  properties?: string | Array<string>
};

export type AppbaseSettings = {
  recordAnalytics?: boolean,
  enableQueryRules?: boolean,
  userId?: string,
  customEvents?: Object
};

export type BaseConfig = {
  index: string,
  url: string,
  credentials: string,
  appbaseConfig?: AppbaseSettings,
  headers: Object,
  transformRequest?: (requestOptions: Object) => Promise<Object>,
  transformResponse?: (response: any) => Promise<any>
};

export type ComponentConfig = BaseConfig & {
  enableQuerySuggestions: boolean,
  results: Array<Object>,
  beforeValueChange: (value: string) => Promise<any>
};

export type SearchBaseConfig = BaseConfig & {
  register: (componentId: string, component: ComponentConfig | Object) => void,
  unregister: (componentId: string) => void,
  getComponent(componentId: string): ComponentConfig,
  transformRequest?: (requestOptions: Object) => Promise<Object>,
  transformResponse?: (response: any) => Promise<any>
};

export type Option = {
  stateChanges?: boolean
};
