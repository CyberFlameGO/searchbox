{"ast":null,"code":"import { oneOf, bool, string, shape, object, number, oneOfType, arrayOf, any } from 'prop-types';\nexport var queryTypes = oneOf(['search', 'term', 'geo', 'range']);\nexport var sourceFields = arrayOf(string);\nexport var sortType = oneOf(['asc', 'desc', 'count']);\nvar DataField = shape({\n  field: string,\n  weight: number\n});\nexport var dataField = oneOfType([string, arrayOf(oneOfType([string, DataField]))]);\nvar reactKeyType = oneOfType([string, arrayOf(string), object, arrayOf(object)]);\nexport var reactType = shape({\n  and: reactKeyType,\n  or: reactKeyType,\n  not: reactKeyType\n});\nexport var position = oneOf(['left', 'right']);\nexport var highlightField = oneOfType([string, arrayOf(string)]);\nexport var queryFormat = oneOf(['and', 'or']);\nexport var fuzziness = oneOf([0, 1, 2, 'AUTO']);\nexport var title = oneOfType([string, any]);\nexport var wholeNumber = function wholeNumber(props, propName, componentName) {\n  if (typeof props[propName] != 'number' || props[propName] < 0) {\n    return new Error(\"Invalid type of \" + propName + \" supplied to \" + componentName + \". Validation failed\");\n  }\n\n  return null;\n};\nexport var appbaseConfig = shape({\n  recordAnalytics: bool,\n  enableQueryRules: bool,\n  userId: string,\n  customEvents: object\n});","map":{"version":3,"sources":["/Users/mohdashraf/Desktop/searchbox/node_modules/@appbaseio/react-native-searchbox/src/utils/types.js"],"names":["oneOf","bool","string","shape","object","number","oneOfType","arrayOf","any","queryTypes","sourceFields","sortType","DataField","field","weight","dataField","reactKeyType","reactType","and","or","not","position","highlightField","queryFormat","fuzziness","title","wholeNumber","props","propName","componentName","Error","appbaseConfig","recordAnalytics","enableQueryRules","userId","customEvents"],"mappings":"AAAA,SACEA,KADF,EAEEC,IAFF,EAGEC,MAHF,EAIEC,KAJF,EAKEC,MALF,EAMEC,MANF,EAOEC,SAPF,EAQEC,OARF,EASEC,GATF,QAUO,YAVP;AAYA,OAAO,IAAMC,UAAU,GAAGT,KAAK,CAAC,CAAC,QAAD,EAAW,MAAX,EAAmB,KAAnB,EAA0B,OAA1B,CAAD,CAAxB;AAEP,OAAO,IAAMU,YAAY,GAAGH,OAAO,CAACL,MAAD,CAA5B;AAEP,OAAO,IAAMS,QAAQ,GAAGX,KAAK,CAAC,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB,CAAD,CAAtB;AAEP,IAAMY,SAAS,GAAGT,KAAK,CAAC;AACtBU,EAAAA,KAAK,EAAEX,MADe;AAEtBY,EAAAA,MAAM,EAAET;AAFc,CAAD,CAAvB;AAKA,OAAO,IAAMU,SAAS,GAAGT,SAAS,CAAC,CACjCJ,MADiC,EAEjCK,OAAO,CAACD,SAAS,CAAC,CAACJ,MAAD,EAASU,SAAT,CAAD,CAAV,CAF0B,CAAD,CAA3B;AAKP,IAAMI,YAAY,GAAGV,SAAS,CAAC,CAC7BJ,MAD6B,EAE7BK,OAAO,CAACL,MAAD,CAFsB,EAG7BE,MAH6B,EAI7BG,OAAO,CAACH,MAAD,CAJsB,CAAD,CAA9B;AAOA,OAAO,IAAMa,SAAS,GAAGd,KAAK,CAAC;AAC7Be,EAAAA,GAAG,EAAEF,YADwB;AAE7BG,EAAAA,EAAE,EAAEH,YAFyB;AAG7BI,EAAAA,GAAG,EAAEJ;AAHwB,CAAD,CAAvB;AAMP,OAAO,IAAMK,QAAQ,GAAGrB,KAAK,CAAC,CAAC,MAAD,EAAS,OAAT,CAAD,CAAtB;AAEP,OAAO,IAAMsB,cAAc,GAAGhB,SAAS,CAAC,CAACJ,MAAD,EAASK,OAAO,CAACL,MAAD,CAAhB,CAAD,CAAhC;AAEP,OAAO,IAAMqB,WAAW,GAAGvB,KAAK,CAAC,CAAC,KAAD,EAAQ,IAAR,CAAD,CAAzB;AAEP,OAAO,IAAMwB,SAAS,GAAGxB,KAAK,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,MAAV,CAAD,CAAvB;AAEP,OAAO,IAAMyB,KAAK,GAAGnB,SAAS,CAAC,CAACJ,MAAD,EAASM,GAAT,CAAD,CAAvB;AAEP,OAAO,IAAMkB,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,EAAoC;AAC7D,MAAI,OAAOF,KAAK,CAACC,QAAD,CAAZ,IAA0B,QAA1B,IAAsCD,KAAK,CAACC,QAAD,CAAL,GAAkB,CAA5D,EAA+D;AAC7D,WAAO,IAAIE,KAAJ,sBACcF,QADd,qBACsCC,aADtC,yBAAP;AAGD;;AACD,SAAO,IAAP;AACD,CAPM;AASP,OAAO,IAAME,aAAa,GAAG5B,KAAK,CAAC;AACjC6B,EAAAA,eAAe,EAAE/B,IADgB;AAEjCgC,EAAAA,gBAAgB,EAAEhC,IAFe;AAGjCiC,EAAAA,MAAM,EAAEhC,MAHyB;AAIjCiC,EAAAA,YAAY,EAAE/B;AAJmB,CAAD,CAA3B","sourcesContent":["import {\n  oneOf,\n  bool,\n  string,\n  shape,\n  object,\n  number,\n  oneOfType,\n  arrayOf,\n  any\n} from 'prop-types';\n\nexport const queryTypes = oneOf(['search', 'term', 'geo', 'range']);\n\nexport const sourceFields = arrayOf(string);\n\nexport const sortType = oneOf(['asc', 'desc', 'count']);\n\nconst DataField = shape({\n  field: string,\n  weight: number\n});\n\nexport const dataField = oneOfType([\n  string,\n  arrayOf(oneOfType([string, DataField]))\n]);\n\nconst reactKeyType = oneOfType([\n  string,\n  arrayOf(string),\n  object,\n  arrayOf(object)\n]);\n\nexport const reactType = shape({\n  and: reactKeyType,\n  or: reactKeyType,\n  not: reactKeyType\n});\n\nexport const position = oneOf(['left', 'right']);\n\nexport const highlightField = oneOfType([string, arrayOf(string)]);\n\nexport const queryFormat = oneOf(['and', 'or']);\n\nexport const fuzziness = oneOf([0, 1, 2, 'AUTO']);\n\nexport const title = oneOfType([string, any]);\n\nexport const wholeNumber = (props, propName, componentName) => {\n  if (typeof props[propName] != 'number' || props[propName] < 0) {\n    return new Error(\n      `Invalid type of ${propName} supplied to ${componentName}. Validation failed`\n    );\n  }\n  return null;\n};\n\nexport const appbaseConfig = shape({\n  recordAnalytics: bool,\n  enableQueryRules: bool,\n  userId: string,\n  customEvents: object\n});\n"]},"metadata":{},"sourceType":"module"}